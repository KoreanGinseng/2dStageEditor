#pragma once
#include "Command.h"
#include "Singleton.h"

namespace Editor
{
    // ********************************************************************************
    /// <summary>
    /// コマンド管理クラス
    /// シングルトン
    /// </summary>
    // ********************************************************************************
    class CCommandManager : public CSingleton<CCommandManager>
    {
        friend class CSingleton<CCommandManager>;
    private:

        //! 実行リスト
        CommandList _exec_list;

        //! やり直しリスト
        CommandList _redo_list;

        //! リスト最大数(def 50)
        int         _list_max;

    protected:

        // ********************************************************************************
        /// <summary>
        /// 配列サイズの管理
        /// </summary>
        /// <param name="list">制御するリスト</param>
        // ********************************************************************************
        void SizeControll(CommandList& list);

    public:

        // ********************************************************************************
        /// <summary>
        /// コンストラクタ
        /// </summary>
        // ********************************************************************************
        CCommandManager(void);

        // ********************************************************************************
        /// <summary>
        /// デストラクタ
        /// </summary>
        // ********************************************************************************
        ~CCommandManager(void);

        // ********************************************************************************
        /// <summary>
        /// 元に戻す
        /// </summary>
        // ********************************************************************************
        void Undo(void);

        // ********************************************************************************
        /// <summary>
        /// やり直し
        /// </summary>
        // ********************************************************************************
        void Redo(void);

        // ********************************************************************************
        /// <summary>
        /// コマンドの登録
        /// </summary>
        /// <param name="command">登録するコマンド</param>
        // ********************************************************************************
        void Register(const CommandPtr& command);

        // ********************************************************************************
        /// <summary>
        /// リストのキャパシティ変更
        /// </summary>
        /// <param name="size">変更サイズ</param>
        // ********************************************************************************
        void Reserve(int size);

        // ********************************************************************************
        /// <summary>
        /// Undo可能か
        /// </summary>
        /// <returns>true : Undo可能, false : Undo不可能</returns>
        // ********************************************************************************
        bool IsUndo(void) const;

        // ********************************************************************************
        /// <summary>
        /// Redo可能か
        /// </summary>
        /// <returns>true : Redo可能, false : Redo不可能</returns>
        // ********************************************************************************
        bool IsRedo(void) const;

        // ********************************************************************************
        /// <summary>
        /// 実行リストの取得
        /// </summary>
        /// <returns>実行リスト</returns>
        // ********************************************************************************
        const CommandList& GetExecList(void) const;

        // ********************************************************************************
        /// <summary>
        /// やり直しリストの取得
        /// </summary>
        /// <returns>やり直しリスト</returns>
        // ********************************************************************************
        const CommandList& GetRedoList(void) const;

        // ********************************************************************************
        /// <summary>
        /// リストのクリア
        /// </summary>
        // ********************************************************************************
        void Clear(void);
    };

    // シングルトン置き換え
    #define theCommandManager CCommandManager::GetInstance()
}

